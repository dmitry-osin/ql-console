"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchStartedEvent = void 0;
var GameType_1 = require("./types/GameType");
var TeamType_1 = require("./types/TeamType");
var MatchStartedEvent = /** @class */ (function () {
    function MatchStartedEvent() {
    }
    MatchStartedEvent.fromQl = function (data) {
        var event = new MatchStartedEvent;
        event.captureLimit = data['CAPTURE_LIMIT'];
        event.factory = data['FACTORY'];
        event.factoryTitle = data['FACTORY_TITLE'];
        event.fragLimit = data['FRAG_LIMIT'];
        event.gameType = GameType_1.GameType[data['GAME_TYPE']] || data['GAME_TYPE'];
        event.infected = data['INFECTED'] ? true : false;
        event.instagib = data['INSTAGIB'] ? true : false;
        event.map = data['MAP'];
        event.matchGuid = data['MATCH_GUID'];
        event.mercyLimit = data['MERCY_LIMIT'];
        event.players = [];
        for (var _i = 0, _a = data['PLAYERS']; _i < _a.length; _i++) {
            var player = _a[_i];
            event.players.push({
                name: player['NAME'],
                steamId: player['STEAM_ID'],
                team: player['TEAM'] == 0 ? TeamType_1.TeamType.FREE : player['TEAM'] == 1 ? TeamType_1.TeamType.RED : TeamType_1.TeamType.BLUE
            });
        }
        event.quadHog = data['QUADHOG'] ? true : false;
        event.roundLimit = data['ROUND_LIMIT'];
        event.scoreLimit = data['SCORE_LIMIT'];
        event.serverTitle = data['SERVER_TITLE'];
        event.timeLimit = data['TIME_LIMIT'];
        event.training = data['TRAINING'] ? true : false;
        return event;
    };
    return MatchStartedEvent;
}());
exports.MatchStartedEvent = MatchStartedEvent;

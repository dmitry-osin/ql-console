"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var zeromq_ts_1 = require("zeromq-ts");
var MatchReportEvent_1 = require("./stats/MatchReportEvent");
var MatchStartedEvent_1 = require("./stats/MatchStartedEvent");
var PlayerConnectEvent_1 = require("./stats/PlayerConnectEvent");
var PlayerDeathEvent_1 = require("./stats/PlayerDeathEvent");
var PlayerDisconnectEvent_1 = require("./stats/PlayerDisconnectEvent");
var PlayerKillEvent_1 = require("./stats/PlayerKillEvent");
var PlayerMedalEvent_1 = require("./stats/PlayerMedalEvent");
var PlayerStatsEvent_1 = require("./stats/PlayerStatsEvent");
var PlayerSwitchTeamEvent_1 = require("./stats/PlayerSwitchTeamEvent");
var RoundOverEvent_1 = require("./stats/RoundOverEvent");
var Stats = /** @class */ (function (_super) {
    __extends(Stats, _super);
    function Stats(address, password, options) {
        var _this = _super.call(this, zeromq_ts_1.SocketType.subscriber, zeromq_ts_1.ProtocolType.tcp, address, __assign(__assign({}, options), { plain_username: password ? 'stats' : undefined, plain_password: password ? password : undefined, zap_domain: password ? 'stats' : undefined })) || this;
        _this.events = new events_1.EventEmitter;
        _this.onConnected(function (eventValue, address, error) {
            _this.subscribe();
        });
        _this.onMessage(function (message) {
            var json = message.toString();
            var obj;
            try {
                obj = JSON.parse(json);
            }
            catch (e) {
                console.error('Could not JSON.parse Quake Live event', e);
                return;
            }
            var type = obj.TYPE;
            var data = obj.DATA;
            switch (type) {
                case 'MATCH_REPORT':
                    _this.events.emit('MATCH_REPORT', MatchReportEvent_1.default.fromQl(data));
                    break;
                case 'MATCH_STARTED':
                    _this.events.emit('MATCH_STARTED', MatchStartedEvent_1.default.fromQl(data));
                    break;
                case 'PLAYER_CONNECT':
                    _this.events.emit('PLAYER_CONNECT', PlayerConnectEvent_1.default.fromQl(data));
                    break;
                case 'PLAYER_DEATH':
                    _this.events.emit('PLAYER_DEATH', PlayerDeathEvent_1.default.fromQl(data));
                    break;
                case 'PLAYER_DISCONNECT':
                    _this.events.emit('PLAYER_DISCONNECT', PlayerDisconnectEvent_1.default.fromQl(data));
                    break;
                case 'PLAYER_KILL':
                    _this.events.emit('PLAYER_KILL', PlayerKillEvent_1.default.fromQl(data));
                    break;
                case 'PLAYER_MEDAL':
                    _this.events.emit('PLAYER_MEDAL', PlayerMedalEvent_1.default.fromQl(data));
                    break;
                case 'PLAYER_STATS':
                    _this.events.emit('PLAYER_STATS', PlayerStatsEvent_1.default.fromQl(data));
                    break;
                case 'PLAYER_SWITCHTEAM':
                    _this.events.emit('PLAYER_SWITCHTEAM', PlayerSwitchTeamEvent_1.default.fromQl(data));
                    break;
                case 'ROUND_OVER':
                    _this.events.emit('ROUND_OVER', RoundOverEvent_1.default.fromQl(data));
                    break;
                default:
                    console.error("Received Quake Live event type '" + type + "' does not exist or is not supported.", data);
            }
        });
        return _this;
    }
    Stats.prototype.onMatchReport = function (listener) {
        this.events.on('MATCH_REPORT', listener);
    };
    Stats.prototype.onMatchStarted = function (listener) {
        this.events.on('MATCH_STARTED', listener);
    };
    Stats.prototype.onPlayerConnect = function (listener) {
        this.events.on('PLAYER_CONNECT', listener);
    };
    Stats.prototype.onPlayerDeath = function (listener) {
        this.events.on('PLAYER_DEATH', listener);
    };
    Stats.prototype.onPlayerDisconnect = function (listener) {
        this.events.on('PLAYER_DISCONNECT', listener);
    };
    Stats.prototype.onPlayerKill = function (listener) {
        this.events.on('PLAYER_KILL', listener);
    };
    Stats.prototype.onPlayerMedal = function (listener) {
        this.events.on('PLAYER_MEDAL', listener);
    };
    Stats.prototype.onPlayerStats = function (listener) {
        this.events.on('PLAYER_STATS', listener);
    };
    Stats.prototype.onPlayerSwitchTeam = function (listener) {
        this.events.on('PLAYER_SWITCHTEAM', listener);
    };
    Stats.prototype.onRoundOver = function (listener) {
        this.events.on('ROUND_OVER', listener);
    };
    return Stats;
}(zeromq_ts_1.ZeroMq));
exports.default = Stats;
